
name: Terraform

on:
  push:
    branches:
      - main
  # pull_request:
  #   branches:
  #     - main
  workflow_dispatch:

jobs:
  terraform:

    runs-on: self-hosted
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-southeast-1
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Check if Docker is running
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          if ! docker info > /dev/null 2>&1; then
          echo "Docker is not running. Starting Docker..."
          sudo systemctl start docker
          if ! docker info > /dev/null 2>&1; then
            echo "Failed to start Docker. Please start Docker manually and try again."
            exit 1
          fi
          fi
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          if ! docker info > /dev/null 2>&1; then
          echo "Docker is not running. Starting Docker..."
          open --background -a Docker
          while ! docker info > /dev/null 2>&1; do
            echo "Waiting for Docker to start..."
            sleep 5
          done
          fi
        fi

    - name: Check if Minikube is running
      run: |
        if ! minikube status --profile=minikube-multi> /dev/null 2>&1; then
          echo "Minikube is not running. Starting Minikube..."
          minikube start --profile=minikube-multi
          if ! minikube status > /dev/null 2>&1; then
          echo "Failed to start Minikube. Please start Minikube manually and try again."
          exit 1
          fi
        fi

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.11

    - name: Terraform Init
      working-directory: ./infrastructure/terraform/application
      run: terraform init

    - name: Terraform Plan
      working-directory: ./infrastructure/terraform/application
      run: |
        terraform plan -var="cloudflare_tunnel_name=${{ vars.CLOUDFLARE_TUNNEL_NAME }}"
        
    - name: Terraform Apply
      working-directory: ./infrastructure/terraform/application
      run: |
        terraform apply -auto-approve -var="cloudflare_tunnel_name=${{ vars.CLOUDFLARE_TUNNEL_NAME }}"

